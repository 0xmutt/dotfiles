# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'body':
  'ctrl-f4': 'core:close'

# Vim normal mode
'atom-text-editor.vim-mode.insert-mode':
  'k j': 'vim-mode:activate-normal-mode' # Duplicates bcoz I always confuse this
  'ctrl-c' : 'unset!'
'atom-text-editor:not(.mini).vim-mode:not(.insert-mode):not(.jumpy-jump-mode)':
  'f': 'jumpy:toggle' # Add jumpy to vim-mode


# Disable Emmet merge lines, bcoz it's break MD preview
'atom-text-editor:not([mini])':
  'ctrl-shift-M': 'unset!'
  'ctrl-,': 'unset!'

'.platform-linux':
  'ctrl-cmd-p': 'project-manager:list-projects'
